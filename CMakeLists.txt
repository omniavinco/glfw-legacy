CMAKE_MINIMUM_REQUIRED( VERSION 2.6 )
PROJECT( "glfw" )

SET( SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src )

FILE( GLOB SRC_FILES "${SRC_DIR}/*.c" )

SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib )
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib )
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin )

IF( USE_COCOA OR USE_CARBON OR USE_MSVS OR USE_X11 OR USE_MINGW OR USE_MSYS OR USE_LCC OR USE_OW OR USE_XMINGW )
ELSE(  )
	IF( APPLE )
		MESSAGE( "Platform : Apple" )
		FIND_LIBRARY( COCOA_AVAIL Cocoa )
		IF( COCOA_AVAIL )
			SET( USE_COCOA ON)
		ELSE(  )
			SET( USE_CARBON ON )
		ENDIF(  )
	ELSEIF( WIN32 )
		IF( MSVC )
			SET( USE_MSVS ON )
		ELSE(  )
		ENDIF(  )
	ENDIF(  )
ENDIF(  )

INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_SOURCE_DIR}/include" )
INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_SOURCE_DIR}/src" )

MACRO( MAKE_PC )
	EXECUTE_PROCESS( COMMAND "sed" "-e" "s,\\@PREFIX\\@,${PREFIX}," "${SRC_DIR}/cocoa/libglfw.pc.in"
			 OUTPUT_FILE "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/libglfw.pc" )
ENDMACRO( MAKE_PC )

IF( USE_COCOA )
	MESSAGE( "Use cocoa library" )
	FILE( GLOB COCOA_SRCS "${SRC_DIR}/cocoa/*.c" "${SRC_DIR}/cocoa/*.m" )
	LIST( APPEND SRC_FILES "${COCOA_SRCS}" )
	INCLUDE_DIRECTORIES( "${SRC_DIR}/cocoa")

	FIND_LIBRARY( COCOA_LIB Cocoa )
	FIND_LIBRARY( OPENGL_LIB OpenGL )
	FIND_LIBRARY( IOKIT_LIB IOKit )
	
	MAKE_PC()

	SET( SHARED_LIBRARIES ${COCOA_LIB} ${OPENGL_LIB} ${IOKIT_LIB} )
	SET( SRC_STATIC_FILES ${SRC_FILES} )
	SET( SRC_SHARED_FILES ${SRC_FILES} )
ELSEIF( USE_CARBON )
	MESSAGE( "Use carbon library" )
	FILE( GLOB CARBON_SRCS "${SRC_DIR}/carbon/*.c" )
	LIST( APPEND SRC_FILES "${CARBON_SRCS}" )
	INCLUDE_DIRECTORIES( "${SRC_DIR}/carbon")

	FIND_LIBRARY( AGL_LIB AGL )
	FIND_LIBRARY( CARBON_LIB Carbon )
	FIND_LIBRARY( OPENGL_LIB OpenGL )

	MAKE_PC()

	SET( SHARED_LIBRARIES ${AGL_LIB} ${OPENGL_LIB} ${CARBON_LIB} )
	SET( SRC_STATIC_FILES ${SRC_FILES} )
	SET( SRC_SHARED_FILES ${SRC_FILES} )
ELSEIF( USE_MSVS OR USE_MINGW )
	FILE( GLOB WIN_SRCS "${SRC_DIR}/win32/*.c" )
	LIST( APPEND SRC_FILES "${WIN_SRCS}" )
	INCLUDE_DIRECTORIES( "${SRC_DIR}/win32")

	MESSAGE( "Use MSVC" )

	SET( SHARED_LIBRARIES winmm opengl32 )
	SET( SRC_STATIC_FILES ${SRC_FILES} )
	SET( SRC_SHARED_FILES ${SRC_FILES} "${SRC_DIR}/win32/glfwdll.def" )
ENDIF(  )

ADD_LIBRARY( libglfw_static STATIC ${SRC_STATIC_FILES} )
ADD_LIBRARY( libglfw_shared SHARED ${SRC_SHARED_FILES} )

SET_PROPERTY( TARGET libglfw_static PROPERTY ARCHIVE_OUTPUT_NAME "glfw" )
IF( USE_MSVS OR USE_MINGW )
	SET_PROPERTY( TARGET libglfw_shared
		PROPERTY RUNTIME_OUTPUT_NAME "GLFW" )
	SET_PROPERTY( TARGET libglfw_shared
		PROPERTY COMPILE_DEFINITIONS _GLFW_NO_DLOAD_WINMM _GLFW_NO_DLOAD_GDI32 GLFW_BUILD_DLL _USRDLL GLFWDLL_EXPORTS )
ELSE(  )
	SET_PROPERTY( TARGET libglfw_shared PROPERTY LIBRARY_OUTPUT_NAME "glfw" )
ENDIF(  )

TARGET_LINK_LIBRARIES( libglfw_static ${STATIC_LIBRARIES} )
TARGET_LINK_LIBRARIES( libglfw_shared ${SHARED_LIBRARIES} )

IF( ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR} )
# Tests And Examples
	SET( TEST_DIR ${CMAKE_CURRENT_SOURCE_DIR}/tests )
	SET( EXAMPLE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/examples )

	INCLUDE( BundleUtilities )
	IF( USE_COCOA )
		SET( TESTS_STATIC_LIBRARIES ${COCOA_LIB} ${OPENGL_LIB} ${IOKIT_LIB} )
		SET( TESTS_SHARED_LIBRARIES ${OPENGL_LIB} )
		SET( EXAMPLES_LIBRARIES ${COCOA_LIB} ${OPENGL_LIB} ${IOKIT_LIB} )
	ELSEIF( USE_CARBON )
		SET( TESTS_STATIC_LIBRARIES ${AGL_LIB} ${OPENGL_LIB} ${CARBON_LIB} )
		SET( TESTS_SHARED_LIBRARIES ${OPENGL_LIB} )
		SET( EXAMPLES_LIBRARIES ${AGL_LIB} ${OPENGL_LIB} ${CARBON_LIB} )
	ELSEIF( USE_MSVS OR USE_MINGW )
		SET( TESTS_STATIC_LIBRARIES opengl32 glu32 )
		SET( TESTS_SHARED_LIBRARIES opengl32 glu32 )
		SET( EXAMPLES_LIBRARIES opengl32 glu32 )
		SET( EXAMPLES_GET_OPT "${EXAMPLE_DIR}/getopt.c" )
		SET( TESTS_GET_OPT "${TEST_DIR}/getopt.c" )
	ENDIF(  )

	LIST( APPEND TESTS_STATIC_LIBRARIES libglfw_static )
	LIST( APPEND TESTS_SHARED_LIBRARIES libglfw_shared )
	LIST( APPEND EXAMPLES_LIBRARIES libglfw_static )

	FUNCTION( ADD_SAMPLE SAMPLE_NAME LINK_TYPE IS_CUI )
		FOREACH( ARG ${ARGN} )
			IF( RESOURCE_MODE )
				LIST( APPEND RESOURCES ${ARG} )
			ELSE(  )
				IF( ARG STREQUAL "RESOURCE" )
					SET( RESOURCE_MODE ON )
				ELSE(  )
					LIST( APPEND MAIN_SRC ${ARG} )
				ENDIF(  )
			ENDIF(  )
		ENDFOREACH(  )
		UNSET( RESOURCE_MODE )

		IF( IS_CUI )
			ADD_EXECUTABLE( ${SAMPLE_NAME} ${MAIN_SRC} )
		ELSE(  )
			IF( APPLE )
				IF( RESOURCES )
					FILE(GLOB SAMPLE_RES ${RESOURCES} )
					SET_SOURCE_FILES_PROPERTIES( ${SAMPLE_RES} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
				ENDIF(  )
				ADD_EXECUTABLE( ${SAMPLE_NAME} MACOSX_BUNDLE ${MAIN_SRC} ${SAMPLE_RES} )
			ELSE(  )
				ADD_EXECUTABLE( ${SAMPLE_NAME} ${MAIN_SRC} )
			ENDIF(  )
		ENDIF(  )

		IF( LINK_TYPE STREQUAL "TESTS_SHARED" )
			TARGET_LINK_LIBRARIES( ${SAMPLE_NAME} ${TESTS_SHARED_LIBRARIES} )
		ELSEIF( LINK_TYPE STREQUAL "TESTS_STATIC" )
			TARGET_LINK_LIBRARIES( ${SAMPLE_NAME} ${TESTS_STATIC_LIBRARIES} )
		ELSEIF( LINK_TYPE STREQUAL "EXAMPLE" )
			TARGET_LINK_LIBRARIES( ${SAMPLE_NAME} ${EXAMPLES_LIBRARIES} )
		ENDIF(  )
	ENDFUNCTION(  )

	# Tests
	ADD_SAMPLE( Defaults "TESTS_STATIC" ON ${TEST_DIR}/defaults.c )
	ADD_SAMPLE( Dynamic "TESTS_SHARED" ON ${TEST_DIR}/dynamic.c )
	ADD_SAMPLE( events "TESTS_STATIC" ON ${TEST_DIR}/events.c )
	ADD_SAMPLE( Joysticks "TESTS_STATIC" ON ${TEST_DIR}/events.c )
	ADD_SAMPLE( Accuracy "TESTS_STATIC" OFF ${TEST_DIR}/accuracy.c )
	ADD_SAMPLE( FSAA "TESTS_STATIC" OFF ${TEST_DIR}/fsaa.c )
	ADD_SAMPLE( FSInput "TESTS_STATIC" OFF ${TEST_DIR}/fsinput.c )
	ADD_SAMPLE( Iconify "TESTS_STATIC" OFF ${TEST_DIR}/iconify.c ${TESTS_GET_OPT} )
	ADD_SAMPLE( Peter "TESTS_STATIC" OFF ${TEST_DIR}/peter.c )
	ADD_SAMPLE( ReOpen "TESTS_STATIC" OFF ${TEST_DIR}/reopen.c )
	ADD_SAMPLE( Tearing "TESTS_STATIC" OFF ${TEST_DIR}/tearing.c )
	ADD_SAMPLE( Version "TESTS_STATIC" OFF ${TEST_DIR}/version.c ${TESTS_GET_OPT} )

	# Examples
	ADD_SAMPLE( Triangle "EXAMPLE" OFF ${EXAMPLE_DIR}/triangle.c )
	ADD_SAMPLE( listmodes "EXAMPLE" ON ${EXAMPLE_DIR}/listmodes.c )
	ADD_SAMPLE( mthello "EXAMPLE" ON ${EXAMPLE_DIR}/mthello.c )
	ADD_SAMPLE( Pong3D "EXAMPLE" OFF ${EXAMPLE_DIR}/pong3d.c RESOURCE "${EXAMPLE_DIR}/pong3d_*.tga" )
	ADD_SAMPLE( mtbench "EXAMPLE" ON ${EXAMPLE_DIR}/mtbench.c )
	ADD_SAMPLE( Particles "EXAMPLE" OFF ${EXAMPLE_DIR}/particles.c )
	ADD_SAMPLE( Splitview "EXAMPLE" OFF ${EXAMPLE_DIR}/splitview.c )
	ADD_SAMPLE( Mipmaps "EXAMPLE" OFF ${EXAMPLE_DIR}/mipmaps.c RESOURCE "${EXAMPLE_DIR}/mipmaps.tga" )
	ADD_SAMPLE( Gears "EXAMPLE" OFF ${EXAMPLE_DIR}/gears.c )
	ADD_SAMPLE( Boing "EXAMPLE" OFF ${EXAMPLE_DIR}/boing.c )
	ADD_SAMPLE( wave "EXAMPLE" OFF ${EXAMPLE_DIR}/wave.c )
	ADD_SAMPLE( heightmap "EXAMPLE" OFF ${EXAMPLE_DIR}/heightmap.c ${EXAMPLES_GET_OPT} )
ENDIF(  )
