CMAKE_MINIMUM_REQUIRED( VERSION 2.6 )
PROJECT( "glfw" )

SET( SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src )

FILE( GLOB SRC_FILES "${SRC_DIR}/*.c" )

SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib )
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib )
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin )

IF( USE_COCOA OR USE_CARBON OR USE_MSVS OR USE_X11 OR USE_MINGW OR USE_MSYS OR USE_LCC OR USE_OW OR USE_XMINGW )
ELSE(  )
	IF( APPLE )
		MESSAGE( "Platform : Apple" )
		FIND_LIBRARY( COCOA_AVAIL Cocoa )
		IF( COCOA_AVAIL )
			SET( USE_COCOA ON)
		ELSE(  )
			SET( USE_CARBON ON )
		ENDIF(  )
	ENDIF(  )
ENDIF(  )

INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_SOURCE_DIR}/include" )
INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_SOURCE_DIR}/src" )

MACRO( MAKE_PC )
	EXECUTE_PROCESS( COMMAND "sed" "-e" "s,\\@PREFIX\\@,${PREFIX}," "${SRC_DIR}/cocoa/libglfw.pc.in"
			 OUTPUT_FILE "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/libglfw.pc" )
ENDMACRO( MAKE_PC )

IF( USE_COCOA )
	MESSAGE( "Use cocoa library" )
	FILE( GLOB COCOA_SRCS "${SRC_DIR}/cocoa/*.c" "${SRC_DIR}/cocoa/*.m" )
	LIST( APPEND SRC_FILES "${COCOA_SRCS}" )
	INCLUDE_DIRECTORIES( "${SRC_DIR}/cocoa")

	FIND_LIBRARY( COCOA_LIB Cocoa )
	FIND_LIBRARY( OPENGL_LIB OpenGL )
	FIND_LIBRARY( IOKIT_LIB IOKit )
	
	MAKE_PC()

	SET( SHARED_LIBRARIES ${COCOA_LIB} ${OPENGL_LIB} ${IOKIT_LIB} )
ELSEIF( USE_CARBON )
	MESSAGE( "Use carbon library" )
	FILE( GLOB CARBON_SRCS "${SRC_DIR}/carbon/*.c" )
	LIST( APPEND SRC_FILES "${CARBON_SRCS}" )
	INCLUDE_DIRECTORIES( "${SRC_DIR}/carbon")

	FIND_LIBRARY( AGL_LIB AGL )
	FIND_LIBRARY( CARBON_LIB Carbon )
	FIND_LIBRARY( OPENGL_LIB OpenGL )

	MAKE_PC()

	SET( SHARED_LIBRARIES ${AGL_LIB} ${OPENGL_LIB} ${CARBON_LIB} )
ENDIF(  )

ADD_LIBRARY( libglfw_static STATIC ${SRC_FILES} )
ADD_LIBRARY( libglfw_shared SHARED ${SRC_FILES} )

SET_PROPERTY( TARGET libglfw_static PROPERTY ARCHIVE_OUTPUT_NAME "libglfw" )
SET_PROPERTY( TARGET libglfw_shared PROPERTY LIBRARY_OUTPUT_NAME "libglfw" )

TARGET_LINK_LIBRARIES( libglfw_static ${STATIC_LIBRARIES} )
TARGET_LINK_LIBRARIES( libglfw_shared ${SHARED_LIBRARIES} )

IF( ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR} )
# Tests And Examples
	INCLUDE( BundleUtilities )
	IF( USE_COCOA )
		SET( TESTS_STATIC_LIBRARIES ${COCOA_LIB} ${OPENGL_LIB} ${IOKIT_LIB} )
		SET( TESTS_SHARED_LIBRARIES ${OPENGL_LIB} )
		SET( EXAMPLES_LIBRARIES ${COCOA_LIB} ${OPENGL_LIB} ${IOKIT_LIB} )
	ELSEIF( USE_CARBON )
		SET( TESTS_STATIC_LIBRARIES ${AGL_LIB} ${OPENGL_LIB} ${CARBON_LIB} )
		SET( TESTS_SHARED_LIBRARIES ${OPENGL_LIB} )
		SET( EXAMPLES_LIBRARIES ${AGL_LIB} ${OPENGL_LIB} ${CARBON_LIB} )
	ENDIF(  )

	LIST( APPEND TESTS_STATIC_LIBRARIES libglfw_static )
	LIST( APPEND TESTS_SHARED_LIBRARIES libglfw_shared )
	LIST( APPEND EXAMPLES_LIBRARIES libglfw_static )

	FUNCTION( ADD_SAMPLE SAMPLE_NAME LINK_TYPE IS_CUI MAIN_SRC RESOURCES )
		IF( IS_CUI )
			ADD_EXECUTABLE( ${SAMPLE_NAME} ${MAIN_SRC} )
		ELSE(  )
			IF( APPLE )
				IF( RESOURCES )
					FILE(GLOB SAMPLE_RES ${RESOURCES} )
					SET_SOURCE_FILES_PROPERTIES( ${SAMPLE_RES} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
				ENDIF(  )
				ADD_EXECUTABLE( ${SAMPLE_NAME} MACOSX_BUNDLE ${MAIN_SRC} ${SAMPLE_RES} )
			ENDIF(  )
		ENDIF(  )

		IF( LINK_TYPE STREQUAL "TESTS_SHARED" )
			TARGET_LINK_LIBRARIES( ${SAMPLE_NAME} ${TESTS_SHARED_LIBRARIES} )
		ELSEIF( LINK_TYPE STREQUAL "TESTS_STATIC" )
			TARGET_LINK_LIBRARIES( ${SAMPLE_NAME} ${TESTS_STATIC_LIBRARIES} )
		ELSEIF( LINK_TYPE STREQUAL "EXAMPLE" )
			TARGET_LINK_LIBRARIES( ${SAMPLE_NAME} ${EXAMPLES_LIBRARIES} )
		ENDIF(  )
	ENDFUNCTION(  )

	# Tests
	SET( TEST_DIR ${CMAKE_CURRENT_SOURCE_DIR}/tests )

	ADD_SAMPLE( Defaults "TESTS_STATIC" ON ${TEST_DIR}/defaults.c "" )
	ADD_SAMPLE( Dynamic "TESTS_SHARED" ON ${TEST_DIR}/dynamic.c "" )
	ADD_SAMPLE( events "TESTS_STATIC" ON ${TEST_DIR}/events.c "" )
	ADD_SAMPLE( Joysticks "TESTS_STATIC" ON ${TEST_DIR}/events.c "" )
	ADD_SAMPLE( Accuracy "TESTS_STATIC" OFF ${TEST_DIR}/accuracy.c "" )
	ADD_SAMPLE( FSAA "TESTS_STATIC" OFF ${TEST_DIR}/fsaa.c "" )
	ADD_SAMPLE( FSInput "TESTS_STATIC" OFF ${TEST_DIR}/fsinput.c "" )
	ADD_SAMPLE( Iconify "TESTS_STATIC" OFF ${TEST_DIR}/iconify.c "" )
	ADD_SAMPLE( Peter "TESTS_STATIC" OFF ${TEST_DIR}/peter.c "" )
	ADD_SAMPLE( ReOpen "TESTS_STATIC" OFF ${TEST_DIR}/reopen.c "" )
	ADD_SAMPLE( Tearing "TESTS_STATIC" OFF ${TEST_DIR}/tearing.c "" )
	ADD_SAMPLE( Version "TESTS_STATIC" OFF ${TEST_DIR}/version.c "" )

	# Examples
	SET( EXAMPLE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/examples )
	
	ADD_SAMPLE( Triangle "EXAMPLE" OFF ${EXAMPLE_DIR}/triangle.c "" )
	ADD_SAMPLE( listmodes "EXAMPLE" ON ${EXAMPLE_DIR}/listmodes.c "" )
	ADD_SAMPLE( mthello "EXAMPLE" ON ${EXAMPLE_DIR}/mthello.c "" )
	ADD_SAMPLE( Pong3D "EXAMPLE" OFF ${EXAMPLE_DIR}/pong3d.c "${EXAMPLE_DIR}/pong3d_*.tga" )
	ADD_SAMPLE( mtbench "EXAMPLE" ON ${EXAMPLE_DIR}/mtbench.c "" )
	ADD_SAMPLE( Particles "EXAMPLE" OFF ${EXAMPLE_DIR}/particles.c "" )
	ADD_SAMPLE( Splitview "EXAMPLE" OFF ${EXAMPLE_DIR}/splitview.c "" )
	ADD_SAMPLE( Mipmaps "EXAMPLE" OFF ${EXAMPLE_DIR}/mipmaps.c "${EXAMPLE_DIR}/mipmaps.tga" )
	ADD_SAMPLE( Gears "EXAMPLE" OFF ${EXAMPLE_DIR}/gears.c "" )
	ADD_SAMPLE( Boing "EXAMPLE" OFF ${EXAMPLE_DIR}/boing.c "" )
	ADD_SAMPLE( wave "EXAMPLE" OFF ${EXAMPLE_DIR}/wave.c "" )
ENDIF(  )
