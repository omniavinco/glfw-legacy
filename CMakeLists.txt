CMAKE_MINIMUM_REQUIRED( VERSION 2.6 )
PROJECT( "glfw" )

SET( SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src )

FILE( GLOB SRC_FILES "${SRC_DIR}/*.c" )

SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib )
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib )
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin )

IF( USE_COCOA OR USE_CARBON OR USE_MSVS OR USE_X11 OR USE_MINGW OR USE_MSYS OR USE_LCC OR USE_OW OR USE_XMINGW )
ELSE(  )
	IF( APPLE )
		MESSAGE( "Platform : Apple" )
		FIND_LIBRARY( COCOA_AVAIL Cocoa )
		IF( COCOA_AVAIL )
			SET( USE_COCOA ON)
		ELSE(  )
			SET( USE_CARBON ON )
		ENDIF(  )
	ENDIF(  )
ENDIF(  )

INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_SOURCE_DIR}/include" )
INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_SOURCE_DIR}/lib" )
INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_SOURCE_DIR}/src" )

IF( USE_COCOA )
	MESSAGE( "Use cocoa library" )
	FILE( GLOB COCOA_SRCS "${SRC_DIR}/cocoa/*.c" "${SRC_DIR}/cocoa/*.m" )
	LIST( APPEND SRC_FILES "${COCOA_SRCS}" )
	INCLUDE_DIRECTORIES( "${SRC_DIR}/cocoa")

	FIND_LIBRARY( COCOA_LIB Cocoa )
	FIND_LIBRARY( OPENGL_LIB OpenGL )
	FIND_LIBRARY( IOKIT_LIB IOKit )

	EXECUTE_PROCESS( COMMAND "sed" "-e" "s,\\@PREFIX\\@,${PREFIX}," "${SRC_DIR}/cocoa/libglfw.pc.in"
			 OUTPUT_FILE "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/libglfw.pc" )

	SET( SHARED_LIBRARIES ${COCOA_LIB} ${OPENGL_LIB} ${IOKIT_LIB} )
ELSEIF( USE_CARBON )
	MESSAGE( "Use carbon library" )
	FILE( GLOB CARBON_SRCS "${SRC_DIR}/carbon/*.c" )
	LIST( APPEND SRC_FILES "${CARBON_SRCS}" )
	INCLUDE_DIRECTORIES( "${SRC_DIR}/carbon")
ENDIF(  )

ADD_LIBRARY( libglfw_static STATIC ${SRC_FILES} )
ADD_LIBRARY( libglfw_shared SHARED ${SRC_FILES} )

SET_PROPERTY( TARGET libglfw_static PROPERTY ARCHIVE_OUTPUT_NAME "libglfw" )
SET_PROPERTY( TARGET libglfw_shared PROPERTY LIBRARY_OUTPUT_NAME "libglfw" )

TARGET_LINK_LIBRARIES( libglfw_static ${STATIC_LIBRARIES} )
TARGET_LINK_LIBRARIES( libglfw_shared ${SHARED_LIBRARIES} )

# Tests
IF( ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR} )
	INCLUDE( BundleUtilities )
	IF( USE_COCOA )
		SET( SAMPLE_STATIC_LIBRARIES ${COCOA_LIB} ${OPENGL_LIB} ${IOKIT_LIB} )
		SET( SAMPLE_SHARED_LIBRARIES ${OPENGL_LIB} )
	ENDIF()

	LIST( APPEND SAMPLE_STATIC_LIBRARIES libglfw_static )
	LIST( APPEND SAMPLE_SHARED_LIBRARIES libglfw_shared )

	SET( TEST_DIR ${CMAKE_CURRENT_SOURCE_DIR}/tests )
	ADD_EXECUTABLE( Accuracy MACOSX_BUNDLE ${TEST_DIR}/accuracy.c )
	TARGET_LINK_LIBRARIES( Accuracy ${SAMPLE_STATIC_LIBRARIES} )

	ADD_EXECUTABLE( Defaults ${TEST_DIR}/defaults.c )
	TARGET_LINK_LIBRARIES( Defaults ${SAMPLE_STATIC_LIBRARIES} )

	ADD_EXECUTABLE( Dynamic MACOSX_BUNDLE ${TEST_DIR}/dynamic.c )
	TARGET_LINK_LIBRARIES( Dynamic ${SAMPLE_SHARED_LIBRARIES} )

	ADD_EXECUTABLE( events ${TEST_DIR}/events.c )
	TARGET_LINK_LIBRARIES( events ${SAMPLE_STATIC_LIBRARIES} )

	ADD_EXECUTABLE( FSAA MACOSX_BUNDLE ${TEST_DIR}/fsaa.c )
	TARGET_LINK_LIBRARIES( FSAA ${SAMPLE_STATIC_LIBRARIES} )

	ADD_EXECUTABLE( FSInput MACOSX_BUNDLE ${TEST_DIR}/fsinput.c )
	TARGET_LINK_LIBRARIES( FSInput ${SAMPLE_STATIC_LIBRARIES} )

	ADD_EXECUTABLE( Iconify MACOSX_BUNDLE ${TEST_DIR}/iconify.c )
	TARGET_LINK_LIBRARIES( Iconify ${SAMPLE_STATIC_LIBRARIES} )

	ADD_EXECUTABLE( Joysticks MACOSX_BUNDLE ${TEST_DIR}/joysticks.c )
	TARGET_LINK_LIBRARIES( Joysticks ${SAMPLE_STATIC_LIBRARIES} )

	ADD_EXECUTABLE( Peter MACOSX_BUNDLE ${TEST_DIR}/peter.c )
	TARGET_LINK_LIBRARIES( Peter ${SAMPLE_STATIC_LIBRARIES} )

	ADD_EXECUTABLE( ReOpen MACOSX_BUNDLE ${TEST_DIR}/reopen.c )
	TARGET_LINK_LIBRARIES( ReOpen ${SAMPLE_STATIC_LIBRARIES} )

	ADD_EXECUTABLE( Tearing MACOSX_BUNDLE ${TEST_DIR}/tearing.c )
	TARGET_LINK_LIBRARIES( Tearing ${SAMPLE_STATIC_LIBRARIES} )

	ADD_EXECUTABLE( Version MACOSX_BUNDLE ${TEST_DIR}/version.c )
	TARGET_LINK_LIBRARIES( Version ${SAMPLE_STATIC_LIBRARIES} )
ENDIF()
